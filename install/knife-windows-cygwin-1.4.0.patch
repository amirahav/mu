--- knife-windows-1.4.0/lib/chef/knife/bootstrap/windows-chef-client-msi.erb	2016-04-12 01:00:36.993000454 -0400
+++ knife-windows-1.4.0/lib/chef/knife/bootstrap/windows-chef-client-msi_patched.erb	2016-04-12 01:17:43.000000000 -0400
@@ -167,6 +167,17 @@
 
   <%= install_chef %>
 
+   SET LookForFile="c:\opscode\chef\bin\chef-client.bat"
+   @echo off
+
+   :CheckForFile
+   IF EXIST %LookForFile% GOTO FoundIt
+   c:\Windows\System32\timeout.exe /t 30
+   GOTO CheckForFile
+
+   :FoundIt
+   @echo on
+
   @if ERRORLEVEL 1 (
       echo Chef-client package failed to install with status code !ERRORLEVEL!. > "&2"
       echo See installation log for additional detail: %CHEF_CLIENT_MSI_LOG_PATH%. > "&2"
--- knife-windows-1.4.0/lib/chef/knife/bootstrap_windows_base.rb	2016-04-12 10:33:50.000000000 -0400
+++ knife-windows-1.4.0/lib/chef/knife/bootstrap_windows_base_patched.rb	2016-04-12 10:20:11.000000000 -0400
@@ -335,7 +335,11 @@
         # we have to run the remote commands in 2047 char chunks
         create_bootstrap_bat_command do |command_chunk|
           begin
-            render_command_result = run_command(command_chunk)
+            render_command = command_chunk
+            if locate_config_value(:cygwin)
+              render_command = %q!cd $TEMP && !+command_chunk
+            end
+            render_command_result = run_command(render_command)
             ui.error("Batch render command returned #{render_command_result}") if render_command_result != 0
             render_command_result
           rescue SystemExit => e
@@ -357,11 +361,20 @@
       end
 
       def bootstrap_command
+        if locate_config_value(:cygwin)
+          @bootstrap_command ||= "cd $TEMP && cmd.exe /C #{bootstrap_bat_file}"
+        else
         @bootstrap_command ||= "cmd.exe /C #{bootstrap_bat_file}"
       end
+        @bootstrap_command
+      end
 
       def bootstrap_render_banner_command(chunk_num)
-        "cmd.exe /C echo Rendering #{bootstrap_bat_file} chunk #{chunk_num}"
+        if locate_config_value(:cygwin)
+          return "echo 'Rendering #{bootstrap_bat_file} chunk #{chunk_num}'"
+        else
+          return "cmd.exe /C echo Rendering #{bootstrap_bat_file} chunk #{chunk_num}"
+        end
       end
 
       def escape_windows_batch_characters(line)
@@ -374,11 +387,18 @@
         bootstrap_bat = ""
         banner = bootstrap_render_banner_command(chunk_num += 1)
         render_template(load_template(config[:bootstrap_template])).each_line do |line|
-          escape_windows_batch_characters(line)
           # We are guaranteed to have a prefix "banner" command that echo's chunk number.  We can
           # confidently prefix every actual command with &&.
           # TODO: Why does ^\n&& work directly through the commandline but not through SOAP?
+          if locate_config_value(:cygwin)
+            render_line = ""
+            if !line.nil? and !line.chomp.strip.nil?
+              render_line = " && echo '#{line.chomp.strip.gsub(/'/, '\'\\\\\1\'\'')}' >> #{bootstrap_bat_file}"
+            end
+          else
+            escape_windows_batch_characters(line)
           render_line = " && >> #{bootstrap_bat_file} (echo.#{line.chomp.strip})"
+          end
           # Windows commands are limited to 8191 characters for machines running XP or higher but
           # this includes the length of environment variables after they have been expanded.
           # Since we don't actually know how long %TEMP% (and it's used twice - once in the banner
@@ -405,8 +425,12 @@
       end
 
       def bootstrap_bat_file
+        if locate_config_value(:cygwin)
+          @bootstrap_bat_file ||= "\"bootstrap-#{Process.pid}-#{Time.now.to_i}.bat\""
+        else
         @bootstrap_bat_file ||= "\"%TEMP%\\bootstrap-#{Process.pid}-#{Time.now.to_i}.bat\""
       end
+      end
 
       def warn_chef_config_secret_key
         ui.info "* " * 40
@@ -426,11 +450,14 @@
       # to whatever the target system is.  We assume that we are only bootstrapping 1 node at a time
       # so we don't need to worry about multipe responses from this command.
       def set_target_architecture(bootstrap_architecture)
+        if locate_config_value(:cygwin)
+        else
         session_results = relay_winrm_command("echo %PROCESSOR_ARCHITECTURE%")
         if session_results.empty? || session_results[0].stdout.strip.empty?
           raise "Response to 'echo %PROCESSOR_ARCHITECTURE%' command was invalid: #{session_results}"
         end
         current_architecture = session_results[0].stdout.strip == "X86" ? :i386 : :x86_64
+        end
 
         if bootstrap_architecture.nil?
           architecture = current_architecture
--- knife-windows-1.4.0/lib/chef/knife/bootstrap_windows_ssh.rb	2016-04-12 01:00:36.994000454 -0400
+++ knife-windows-1.4.0/lib/chef/knife/bootstrap_windows_ssh_patched.rb	2016-04-12 01:14:37.000000000 -0400
@@ -91,12 +91,24 @@
         :boolean => true,
         :default => true
 
+      option :cygwin,
+        :long => "--[no-]cygwin",
+        :short => "-c",
+        :description => "Assume that we have Cygwin (and a bash shell) at the client end.",
+        :boolean => true,
+        :default => false
+
       def run
         bootstrap
       end
 
       def run_command(command = '')
         ssh = Chef::Knife::Ssh.new
+        if locate_config_value(:cygwin)
+          # Harvest crucial env variables that don't exist by default in
+          # Cygwin shells.
+          command = %q{export CYGWIN=nodosfilewarning && for __dir in /proc/registry/HKEY_LOCAL_MACHINE/SYSTEM/CurrentControlSet/Control/Session\ Manager/Environment;do cd "$__dir";for __var in *;do __var=`echo $__var | tr "[a-z]" "[A-Z]"` ; test -z "${!__var}" && export $__var="`cat $__var`" >/dev/null 2>&1;done;/bin/true;done && export TEMP="$SYSTEMROOT/TEMP" && export TMP="$TEMP"} + " && cd && " + command
+        end
         ssh.name_args = [ server_name, command ]
         ssh.config[:ssh_user] = locate_config_value(:ssh_user)
         ssh.config[:ssh_password] = locate_config_value(:ssh_password)
--- knife-windows-1.4.0/lib/chef/knife/core/windows_bootstrap_context.rb	2016-04-12 01:00:36.994000454 -0400
+++ knife-windows-1.4.0/lib/chef/knife/core/windows_bootstrap_context_patched.rb	2016-04-12 01:03:35.000000000 -0400
@@ -285,7 +285,12 @@
             url += "&pv=#{machine_os}" unless machine_os.nil?
             url += "&m=#{machine_arch}" unless machine_arch.nil?
             url += "&DownloadContext=#{download_context}" unless download_context.nil?
+            if !@config[:bootstrap_version].nil? and @config[:bootstrap_version]
+              require 'uri'
+              url += "&v=#{URI.escape(@config[:bootstrap_version])}"
+            else
             url += latest_current_windows_chef_version_query
+            end
           else
             @config[:msi_url]
           end
