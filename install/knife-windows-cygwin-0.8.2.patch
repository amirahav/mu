diff -BbruPN knife-windows-0.8.2/lib/chef/knife/bootstrap_windows_base.rb knife-windows-0.8.2-patched/lib/chef/knife/bootstrap_windows_base.rb
--- knife-windows-0.8.2/lib/chef/knife/bootstrap_windows_base.rb	2015-01-27 01:34:57.345453199 +0000
+++ knife-windows-0.8.2-patched/lib/chef/knife/bootstrap_windows_base.rb	2015-01-27 01:32:30.582940660 +0000
@@ -153,7 +153,12 @@
         # we have to run the remote commands in 2047 char chunks
         create_bootstrap_bat_command do |command_chunk, chunk_num|
           begin
-            render_command_result = run_command(%Q!cmd.exe /C echo "Rendering #{bootstrap_bat_file} chunk #{chunk_num}" && #{command_chunk}!)
+            if locate_config_value(:cygwin)
+              render_command = %q!cd $TEMP && cmd.exe /C 'echo "Rendering !+bootstrap_bat_file+%q! chunk !+chunk_num.to_s+%q!" && !+command_chunk+%q!'!
+            else
+              render_command = %q!cmd.exe /C echo "Rendering !+bootstrap_bat_file+%q! chunk !+chunk_num.to_s+%q!" && !+command_chunk
+            end
+            render_command_result = run_command(render_command)
             ui.error("Batch render command returned #{render_command_result}") if render_command_result != 0
             render_command_result
           rescue SystemExit => e
@@ -174,8 +179,12 @@
       end
 
       def bootstrap_command
+        if locate_config_value(:cygwin)
+          @bootstrap_command ||= "cd $TEMP && cmd.exe /C #{bootstrap_bat_file}"
+        else
         @bootstrap_command ||= "cmd.exe /C #{bootstrap_bat_file}"
       end
+      end
 
       def create_bootstrap_bat_command(&block)
         bootstrap_bat = []
@@ -194,8 +203,12 @@
       end
 
       def bootstrap_bat_file
+        if locate_config_value(:cygwin)
+          @bootstrap_bat_file ||= "\"bootstrap-#{Process.pid}-#{Time.now.to_i}.bat\""
+        else
         @bootstrap_bat_file ||= "\"%TEMP%\\bootstrap-#{Process.pid}-#{Time.now.to_i}.bat\""
       end
+      end
 
       def locate_config_value(key)
         key = key.to_sym
diff -BbruPN knife-windows-0.8.2/lib/chef/knife/bootstrap_windows_ssh.rb knife-windows-0.8.2-patched/lib/chef/knife/bootstrap_windows_ssh.rb
--- knife-windows-0.8.2/lib/chef/knife/bootstrap_windows_ssh.rb	2015-01-27 01:34:57.346453175 +0000
+++ knife-windows-0.8.2-patched/lib/chef/knife/bootstrap_windows_ssh.rb	2015-01-27 01:32:30.582940660 +0000
@@ -71,12 +71,24 @@
         :boolean => true,
         :default => true
 
+      option :cygwin,
+        :long => "--[no-]cygwin",
+  			:short => "-c",
+        :description => "Assume that we have Cygwin (and a bash shell) at the client end.",
+        :boolean => true,
+        :default => false
+
       def run
         bootstrap
       end
 
       def run_command(command = '')
         ssh = Chef::Knife::Ssh.new
+        if locate_config_value(:cygwin)
+          # Harvest crucial env variables that don't exist by default in
+          # Cygwin shells.
+          command = %q{export CYGWIN=nodosfilewarning && for __dir in /proc/registry/HKEY_LOCAL_MACHINE/SYSTEM/CurrentControlSet/Control/Session\ Manager/Environment;do cd "$__dir";for __var in *;do __var=`echo $__var | tr "[a-z]" "[A-Z]"` ; test -z "${!__var}" && export $__var="`cat $__var`" >/dev/null 2>&1;done;/bin/true;done && export TEMP="$SYSTEMROOT/TEMP" && export TMP="$TEMP"} + " && cd && " + command
+        end
         ssh.name_args = [ server_name, command ]
         ssh.config[:ssh_user] = locate_config_value(:ssh_user)
         ssh.config[:ssh_password] = locate_config_value(:ssh_password)
